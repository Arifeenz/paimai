import { OpenAI } from 'openai'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_ANON_KEY!
)

// üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å edge ‚Üí nodejs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ OpenAI SDK ‡πÑ‡∏î‡πâ
export const config = {
  runtime: 'nodejs',
}

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response('Method Not Allowed', { status: 405 })
  }

  const body = await req.json()
  const { province, startDate, endDate, style, budget } = body

  if (!province || !startDate || !endDate || !style || !budget) {
    return new Response(JSON.stringify({ error: 'Missing input' }), {
      status: 400,
      headers: { 'Content-Type': 'application/json' }
    })
  }

  const { data: places, error } = await supabase
    .from('places')
    .select('*')
    .eq('province', province)

  if (error) {
    console.error('Supabase Error:', error)
    return new Response(JSON.stringify({ error: 'Failed to fetch places' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }

  const placeList = places?.map(p => p.name).join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'

  const prompt = `
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏Å‡∏î‡πå‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${province} ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startDate} ‡∏ñ‡∏∂‡∏á ${endDate}
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° "${style}" ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${budget} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô
‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ: ${placeList}

‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô:
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1:
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà...
- ‡πÄ‡∏ß‡∏•‡∏≤...
- ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2: ...
`

  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! })

  let aiPlan = '';
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
    })
    aiPlan = completion.choices[0].message.content || ''
  } catch (err) {
    console.error("‚ùå OpenAI error:", err)
    return new Response(JSON.stringify({ error: "AI generation failed" }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }

  return new Response(JSON.stringify({ plan: aiPlan }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  })
}
